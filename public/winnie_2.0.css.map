{
  "version": 3,
  "file": "winnie_2.0.css",
  "sources": [
    "..\\src\\App.html",
    "..\\src\\Map.html",
    "..\\src\\Share.html",
    "..\\src\\TreeView.html",
    "..\\src\\LineNode.html",
    "..\\src\\LegendIconCell.html"
  ],
  "sourcesContent": [
    "{#if urlParams.edit}\r\n<div class=\"editor-sidebarContainer editor_sidebarExpanded\">\r\n    <div class=\"sidebarPanel\">\r\n        <div class=\"sidebarPanel-toolbarContainer\">\r\n            <div class=\"dropdownMenuWidget\">\r\n                {#each dropdownMenu as it}\r\n                <div class=\"dropdownMenuWidget-item{it.checked ? ' checked' : ''}\" on:click=\"checkMe(it, this)\">\r\n                    <i class=\"icon-{it.name}\"></i>\r\n                    <span>{it.title}</span>\r\n                </div>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n        <div id=\"editor\" class=\"editor\"></div>\r\n    </div>\r\n</div>\r\n{/if}\r\n<div class=\"editor-viewerContainer editor_sidebarExpanded\">\r\n    <Map permalink={permalink} bind:map />\r\n</div>\r\n{#if share}\r\n<Share conf={conf} />\r\n{/if}\r\n\r\n{#if permalink && permalink.app && permalink.app.gmxTimeline}\r\n<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display:none\">\r\n    <defs>\r\n\r\n        <clippath id=\"clip-path\"><rect x=\"0\" y=\"0\" width=\"13\" height=\"13\" /></clippath>\r\n    </defs>\r\n    <symbol id=\"timeline-icon\" viewbox=\"0 0 13 13\">\r\n        <title>gmxTimeline</title>\r\n        <path d=\"M6.5,0C2.9,0,0,2.9,0,6.5S2.9,13,6.5,13S13,10.1,13,6.5S10.1,0,6.5,0z M9.8,7.3H5.7V3.3h1.6v2.4h2.4V7.3z\" />\r\n    </symbol>\r\n</svg>\r\n{/if}\r\n\r\n\r\n<script>\r\n    const DEFAULT_CONFIG = \"OVJLO\";\r\n\r\n    const serverBase = window.serverBase || '//maps.kosmosnimki.ru/',\r\n        chkPar = (key, h1, h2, zn) => h1[key] || (key in h2 ? h2[key] : zn || true);\r\n\r\n    import Map from './Map.html';\r\n    import Share from './Share.html';\r\n    export default {\r\n        data() {\r\n            return {\r\n                share: false,\r\n                conf: '',\r\n                urlParams: {},\r\n                dropdownMenu: [\r\n                    { name: 'refresh', title: 'Refresh' },\r\n                    { name: 'link', title: 'Share', checked: false }\r\n                ],\r\n                map: null,\r\n                permalink: null\r\n            }\r\n        },\r\n        methods: {\r\n            checkMe(it, node) {\r\n                let cmd = it.name,\r\n                    json = this.editor.getValue(),\r\n                    out = null;\r\n                try {\r\n                    out = JSON.parse(json);\r\n                } catch (err) {\r\n                    let error = this.editor.getSession().getAnnotations()[0];\r\n                    alert('Ошибка в конфигурации:\\n строка: ' + error.row + '\\n позиция: ' + error.column + '\\n сообщение: ' + error.text);\r\n                    console.log('error in json: ', error);\r\n                }\r\n                if (out) {\r\n                    if (cmd === 'refresh') {\r\n                        this.set({ permalink: out });\r\n                    } else if (cmd === 'link') {\r\n                        let { share } = this.get();\r\n                        if (share) {\r\n                            node.classList.remove('checked');\r\n                            this.set({ share: false });\r\n                        } else {\r\n                            node.classList.add('checked');\r\n                            fetch(serverBase + 'TinyReference/Create.ashx', {\r\n                                method: 'post',\r\n                                headers: { 'Content-type': 'application/x-www-form-urlencoded' },\r\n                                body: L.gmxUtil.getFormData({ WrapStyle: 'None', content: out }),\r\n                                mode: 'cors',\r\n                                credentials: 'include'\r\n                            })\r\n                                .then(res => res.json())\r\n                                .then(json => {\r\n                                    if (json.Status === 'ok') {\r\n                                        this.set({ share: true, conf: json.Result });\r\n                                    }\r\n                                })\r\n                                .catch(console.error);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            checkPermalink(out) {\r\n                let { urlParams } = this.get();\r\n                // console.log('?config=7ZSC4  dddddddd', out, urlParams)\r\n                if (out.app) {\r\n                    out.app.theme = chkPar('theme', urlParams, out.app, 'dark');\t\t// тема по умолчанию\r\n                    out.app.iconSidebar = chkPar('iconSidebar', urlParams, out.app);\t// iconSidebar по умолчанию\r\n                    out.app.treeView = chkPar('treeView', urlParams, out.app);\t\t\t// treeView по умолчанию\r\n                    out.app.iconLayers = chkPar('iconLayers', urlParams, out.app);\t\t// iconLayers по умолчанию\r\n                    out.app.drawing = chkPar('drawing', urlParams, out.app);\t\t\t// drawing по умолчанию\r\n                    //out.app.gmxTimeline = chkPar('gmxTimeline', urlParams, out.app);\t// gmxTimeline по умолчанию\r\n                    out.app.gmxTimeline = urlParams.gmxTimeline === 'true' || out.app.gmxTimeline || false;\t// gmxTimeline по умолчанию false\r\n                    out.app.GWWFPlugin = urlParams.GWWFPlugin === 'true' || out.app.GWWFPlugin || false;\t// GWWFPlugin по умолчанию false\r\n                }\r\n                let plugins = out.plugins || {};\r\n                if (out.app.GWWFPlugin && !plugins.GWWFPlugin) {\r\n                    plugins.GWWFPlugin = {\r\n                        \"pluginName\": \"WWF Plugin new\",\r\n                        \"file\": \"//maps.kosmosnimki.ru/api/plugins/external/GMXPluginWWF/gmxPluginWWF.js\",\r\n                        \"module\": \"GWWFPlugin\",\r\n                        \"mapPlugin\": true,\r\n                        \"isPublic\": true\r\n                    };\r\n                }\r\n\r\n                if (plugins.GWWFPlugin) {\r\n                    L.gmxUtil.requestLink(plugins.GWWFPlugin.file.replace(/\\.js$/, '\\.css'));\r\n                    L.gmxUtil.requestLink(plugins.GWWFPlugin.file, {\r\n                    }).then(() => {\r\n                        out.plugins = plugins;\r\n                        this.set({ permalink: out });\r\n                    }).catch(console.warn);\r\n                } else {\r\n                    this.set({ permalink: out });\r\n                }\r\n\r\n                //this.set({permalink: out});\r\n                // this.set({permalink: out, confStr: JSON.stringify(out, null, 2)});\r\n                if (urlParams.edit) {\r\n                    L.gmxUtil.requestLink('//cdnjs.cloudflare.com/ajax/libs/ace/1.4.1/ace.js', {\r\n                        // integrity: 'sha256-kCykSp9wgrszaIBZpbagWbvnsHKXo4noDEi6ra6Y43w=',\r\n                        // crossorigin: 'anonymous'\r\n                    }).then(() => {\r\n                        var editor = ace.edit(\"editor\");\r\n                        editor.setTheme(\"ace/theme/monokai\");\r\n                        // editor.session.setMode(\"ace/mode/json\");\r\n                        editor.getSession().setMode(\"ace/mode/json\");\r\n\r\n                        // editor.setOptions({\r\n                        // mode: \"ace/mode/json\",\r\n                        // theme: \"ace/theme/monokai\",\r\n                        // fontSize: \"10pt\",\r\n                        // showPrintMargin : false,\r\n                        // enableBasicAutocompletion: true,\r\n                        // enableSnippets: true,\r\n                        // enableLiveAutocompletion: true,\r\n                        // wrap: true,\r\n                        // scrollPastEnd: true,\r\n                        // displayIndentGuides: true,\r\n                        // });\r\n                        // editor.session.setMode(\"ace/mode/javascript\");\r\n                        editor.container.getElementsByClassName('ace_scrollbar-v')[0].style.width = '4px';\r\n                        editor.setValue(JSON.stringify(out, null, 2))\r\n                        this.editor = editor;\r\n                        // window.ted = editor;\r\n                    }).catch(console.warn);\r\n\r\n                }\r\n                if (out.app.gmxTimeline && out.app.gmxTimeline !== 'false') {\r\n                    L.gmxUtil.requestLink('//maps.kosmosnimki.ru/api/plugins/timeline/2.9.1/timeline.js');\r\n                    L.gmxUtil.requestLink('//maps.kosmosnimki.ru/api/plugins/timeline/2.9.1/timeline.css');\r\n                    // L.gmxUtil.requestLink('L.Control.gmxTimeLine.js');\r\n                    L.gmxUtil.requestLink('//maps.kosmosnimki.ru/api/plugins/external/GMXPluginTimeLine/L.Control.gmxTimeLine.js');\r\n                    L.gmxUtil.requestLink('//maps.kosmosnimki.ru/api/plugins/external/GMXPluginTimeLine/L.Control.gmxTimeLine.css');\r\n                }\r\n            },\r\n            getPermalink(id) {\r\n                let out = {};\r\n                if (id) {\r\n                    fetch(serverBase + 'TinyReference/Get.ashx?WrapStyle=None&id=' + id, {\r\n                        mode: 'cors',\r\n                        credentials: 'include'\r\n                    })\r\n                        .then(res => res.json())\r\n                        .then(json => {\r\n                            if (json.Status === 'ok') {\r\n                                out = json.Result ? JSON.parse(json.Result) : {};\r\n                            }\r\n                            this.checkPermalink(out);\r\n                        });\r\n                    // .catch(err => console.log(err));\r\n                    // } else {\r\n                    // setTimeout(function() {\r\n                    // this.checkPermalink(out);\r\n                    // }.bind(this), 0);\r\n                }\r\n            }\r\n        },\r\n\r\n        components: {\r\n            Map,\r\n            Share\r\n        },\r\n\r\n        onstate({ changed, current, previous }) {\r\n            // console.log('in onstate', changed, current, previous);\r\n            if (changed.urlParams) {\r\n                let conf = current.urlParams.config || DEFAULT_CONFIG;\r\n                this.getPermalink(conf);\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    #editor {\r\n        height: calc(100% - 40px);\r\n        top: 40px;\r\n    }\r\n\r\n    .sidebarPanel {\r\n        font-family: 'Roboto';\r\n        height: 100%;\r\n    }\r\n\r\n    .editor-viewerContainer {\r\n        position: relative;\r\n        top: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        right: 0;\r\n        overflow: hidden;\r\n        z-index: 5;\r\n        float: left;\r\n        width: 100%;\r\n    }\r\n\r\n    .editor-sidebarContainer .editor-viewerContainer {\r\n        left: 500px;\r\n    }\r\n\r\n    .editor-sidebarContainer {\r\n        position: relative;\r\n        top: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        width: 0px;\r\n        overflow: hidden;\r\n        background: #fff;\r\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\r\n        -webkit-transition: width .5s ease;\r\n        transition: width .5s ease;\r\n        z-index: 20;\r\n    }\r\n\r\n    .editor_sidebarExpanded.editor-sidebarContainer {\r\n        width: 500px;\r\n    }\r\n\r\n    .hidden {\r\n        display: none;\r\n    }\r\n\r\n    .dropdownMenuWidget {\r\n        display: table;\r\n    }\r\n\r\n    .dropdownMenuWidget {\r\n        height: 100%\r\n    }\r\n\r\n    .dropdownMenuWidget-item {\r\n        display: table-cell;\r\n        vertical-align: middle;\r\n        font-size: 14px;\r\n        cursor: pointer;\r\n        padding: 0px 10px;\r\n        white-space: nowrap;\r\n        color: #424242;\r\n    }\r\n\r\n        .checked, .dropdownMenuWidget-item:hover, .dropdownMenuWidget-item.checked {\r\n            background: rgba(0, 0, 0, 0.05)\r\n        }\r\n\r\n    .dropdownMenuWidget.right {\r\n        right: 0px;\r\n        padding: 0;\r\n        margin: 0;\r\n        position: absolute;\r\n        background-color: #ebebeb;\r\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\r\n        height: 26px;\r\n    }\r\n\r\n    .sidebarPanel-toolbarContainer {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        height: 40px;\r\n        border-right: 1px solid #f0f0f0;\r\n        background-color: #ebebeb;\r\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\r\n        z-index: 40\r\n    }\r\n\r\n    .pointer.title {\r\n        position: relative;\r\n        bottom: 4px;\r\n    }\r\n</style>\r\n",
    "<div id=\"map\"></div>\r\n\r\n<style>\r\n:global(.leaflet-gmx-loaderStatus.leaflet-control) {\r\n    top: -123px;\r\n    right: 5px;\r\n    left: unset;\r\n}\r\n:global(.gmxControlPopup table.vectorInfoParams td) {\r\n    border: 1px solid #dddddd;\r\n\t/*width: 70%;*/\r\n}\r\n:global(.gmxControlPopup table.vectorInfoParams td.key) {\r\n    font-weight: bold;\r\n\twidth: 160px;\r\n}\r\n\r\n:global(.dark .gmxControlPopup) {\r\n\tmargin: 13px 19px;\r\n    line-height: 1.4;\r\n}\r\n:global(.wwf-slider-container.leaflet-control) {\r\n    margin-right: 48px;\r\n    margin-bottom: 11px;\r\n}\r\n\r\n</style>\r\n\r\n<script>\r\n\timport TreeView from './TreeView.html';\r\n\r\n\timport './global.css';\r\n\timport './iconLayersDark.css';\r\n\r\n\timport SidebarControl from  'scanex-leaflet-sidebar';\r\n\timport 'scanex-leaflet-sidebar/dist/scanex-leaflet-sidebar.css';\r\n\r\n\timport IconLayers from 'leaflet-iconlayers';\r\n\timport 'leaflet-iconlayers/dist/iconLayers.css';\r\n\t\r\n\r\n\tconst serverBase = window.serverBase || '//maps.kosmosnimki.ru/';\r\n\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tlayersTree: {\r\n\t\t\t\t\toptions: {},\r\n\t\t\t\t\tvisible: {},\r\n\t\t\t\t\texpanded: {}\r\n\t\t\t\t},\r\n\t\t\t\tpermalink: null,\r\n\t\t\t\tmap: null\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tcreateMap(it) {\r\n\t\t\t\tlet {layersTree} = this.get();\r\n                let app = it.app || {},\r\n                    gmxMap = app.gmxMap || {},\r\n                    state = it.state || {},\r\n                    // layersTree = state.layersTree || {},\r\n                    calendar = state.calendar || {},\r\n                    mapID = gmxMap.mapID || '946GH',\r\n                    apiKey = gmxMap.apiKey || 'Z2SSNR87N4',\r\n                    pos = state.map ? state.map.position : {},\r\n                    minZoom = state.map ? state.map.minZoom || 1 : 1,\r\n                    maxZoom = state.map ? state.map.maxZoom || 21 : 21;\r\n\r\n\t\t\t\t// console.log('createMap', it)\r\n\t\t\t\tif(app.theme) {\r\n\t\t\t\t\tdocument.body.classList.add(app.theme);\r\n\t\t\t\t}\r\n\t\t\t\tif(navigator.platform.match('Mac') !== null) {\r\n\t\t\t\t\tdocument.body.classList.add('OSX');\r\n\t\t\t\t}\r\n\t\t\t\tif(L.leafletMap) {\r\n\t\t\t\t\tL.leafletMap.remove();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlayersTree = state.layersTree || layersTree;\r\n\t\t\t\tlayersTree.options = layersTree.options || {};\r\n\t\t\t\tthis.layersTree = layersTree;\r\n\t\t\t\tlet map = new L.Map('map', {\r\n\t\t\t\t\tsrs: 3857,\r\n\t\t\t\t\tlayers: [],\r\n\t\t\t\t\tcenter: new L.LatLng(pos.y || 0, pos.x || 60),\r\n                    zoom: pos.z || 3,\r\n                    minZoom: minZoom,\r\n                    maxZoom: maxZoom\r\n\t\t\t\t});\r\n\t\t\t\tL.leafletMap = map;\r\n\r\n\t\t\t\tmap.gmxControlsManager.init({\r\n\t\t\t\t\tgmxDrawing: !app.drawing || app.drawing === 'false' ? null : {position: 'right'},\r\n\t\t\t\t\tgmxZoom: {position: 'gmxbottomright'},\r\n\t\t\t\t\tgmxLoaderStatus: {position: 'gmxbottomright'},\r\n\t\t\t\t\tgmxHide: null\r\n\t\t\t\t});\r\n\t\t\t\tmap.gmxControlsManager.setSvgSprites('//www.kosmosnimki.ru/lib/geomixer_1.3/img/svg-symbols.svg');\r\n\r\n\t\t\t\tif (app.iconSidebar && app.iconSidebar !== 'false') {\r\n\t\t\t\t\tvar iconSidebar = new SidebarControl({position: 'topleft', className: 'sidebarControl'});\r\n\t\t\t\t\ticonSidebar.addTo(map);\r\n\t\t\t\t\ticonSidebar.getContainer().classList.add('sidebarControl');\r\n\r\n\t\t\t\t\tthis.iconSidebar = iconSidebar;\r\n\t\t\t\t\tif (app.treeView && app.treeView !== 'false') {\r\n\t\t\t\t\t\tvar treePane = iconSidebar.addTab({id: 'treeView', icon: 'icon-layers', opened: 'opened', closed: 'closed'});\r\n\t\t\t\t\t\t// var treeMini = iconSidebar.addTab({id: 'aura', icon: 'icon-layers', opened: 'opened', closed: 'closed'});\r\n\t\t\t\t\t\tthis.treePane = treePane;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdocument.body.classList.add('noIconSidebar');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.mapID = mapID;\r\n\t\t\t\tlet opt = {\r\n\t\t\t\t\tleafletMap: map,\r\n\t\t\t\t\tapiKey: apiKey,\r\n\t\t\t\t\t// visibleItemOnly: true,\t// TODO: только видимые элементы (слои и папки) баги серверного скрипта\r\n\t\t\t\t\tsetZIndex: true\r\n\t\t\t\t\t// ,\r\n\t\t\t\t\t// visibility: layersTree.visible || {}\r\n\t\t\t\t};\r\n\t\t\t\tL.gmx.loadMap(mapID, opt).then(function(gmxMap) {\r\n\t\t\t\t\tthis.gmxMap = gmxMap;\r\n\t\t\t\t\tlet dateInterval = state.calendar || {},\r\n\t\t\t\t\t\ttb = dateInterval.dateBegin,\r\n\t\t\t\t\t\tte = dateInterval.dateEnd;\r\n\t\t\t\t\tif(!tb) {\r\n\t\t\t\t\t\tlet day = 1000*60*60*24,\r\n\t\t\t\t\t\t\tcd = new Date();\r\n\t\t\t\t\t\ttb = Date.UTC(cd.getUTCFullYear(), cd.getUTCMonth(), cd.getUTCDate());\r\n\t\t\t\t\t\tte = tb + day;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet db = new Date(tb), de = new Date(te);\r\n\t\t\t\t\tgmxMap.layers.forEach((it) => {\r\n\t\t\t\t\t\tif(it.getGmxProperties) {\r\n\t\t\t\t\t\t\tlet props = it.getGmxProperties(),\r\n\t\t\t\t\t\t\t\tid = props.name;\r\n\t\t\t\t\t\t\tif(it.setDateInterval) {\r\n\t\t\t\t\t\t\t\tit.setDateInterval(db, de);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(id in layersTree.visible) {\r\n\t\t\t\t\t\t\t\tmap[layersTree.visible[id] ? 'addLayer' : 'removeLayer'](it);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tL.gmx.gmxMapManager.iterateNode(gmxMap.rawTree, function(node, prnt) {\r\n\t\t\t\t\t\tlet props = node.content.properties,\r\n\t\t\t\t\t\t\tid = props.name || props.GroupID;\r\n\t\t\t\t\t\tif (props.GroupID) {\r\n\t\t\t\t\t\t\tif (props.expanded && !(id in layersTree.expanded)) {\r\n\t\t\t\t\t\t\t\tlayersTree.expanded[id] = props.expanded;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (props.visible && !(id in layersTree.visible)) {\r\n\t\t\t\t\t\t\t\tlayersTree.visible[id] = props.visible;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (props.visible && !(id in layersTree.visible)) {\r\n\t\t\t\t\t\t\t\tlayersTree.visible[id] = props.visible;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet prntProps = prnt.properties;\r\n\t\t\t\t\t\t\tif (prntProps.GroupID && prntProps.list) {\r\n\t\t\t\t\t\t\t\tlet opt = layersTree.options[id] || {};\r\n\t\t\t\t\t\t\t\topt.list = prntProps.list;\r\n\t\t\t\t\t\t\t\tlayersTree.options[id]  = opt;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, {nodes: gmxMap.nodes});\r\n\r\n\t\t\t\t\t// this.set({layersTree: layersTree}); \r\n\t\t\t\t\t// this.set({gmxMap: gmxMap}); \r\n\t\t\t\t\tlet shiftIconLayers = false,\r\n\t\t\t\t\t\tgmxTimelineContainer = null,\r\n\t\t\t\t\t\trepaintTimeline = null;\r\n\r\n\t\t\t\t\tif (app.gmxTimeline && app.gmxTimeline !== 'false') {\r\n\t\t\t\t\t\t/* TimeLine */\r\n\t\t\t\t\t\tvar control = L.control.gmxTimeline({\r\n\t\t\t\t\t\t\tmoveable: true\r\n\t\t\t\t\t\t\t}).on('dateInterval', function (ev) {\r\n\t\t\t\t\t\t\t\tgmxMap.layersByID[ev.layerID].setDateInterval(ev.beginDate, ev.endDate);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.on('statechanged', function () {\r\n\t\t\t\t\t\t\t\trepaintTimeline();\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.on('click', function (ev) {\r\n\t\t\t\t\t\t\t\tgmxMap.layersByID[ev.layerID].repaint();\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis.gmxTimeline = control;\r\n\t\t\t\t\t\trepaintTimeline = () => {\r\n\t\t\t\t\t\t\tif (control._container) {\r\n\t\t\t\t\t\t\t\tcontrol._container.classList[shiftIconLayers ? 'add' : 'remove']('shiftTimeline');\r\n\t\t\t\t\t\t\t\tcontrol._redrawTimeline();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tmap\r\n\t\t\t\t\t\t\t.on('layerremove', function (ev) {\r\n\t\t\t\t\t\t\t\tlet layer = ev.layer,\r\n\t\t\t\t\t\t\t\t\tprops = layer && layer.getGmxProperties && layer.getGmxProperties();\r\n\t\t\t\t\t\t\t\tif (props && props.name) {\r\n\t\t\t\t\t\t\t\t\tlayersTree.visible[props.name] = false;\r\n\t\t\t\t\t\t\t\t\tif (this._treeView) {\r\n\t\t\t\t\t\t\t\t\t\tthis._treeView.set({layersTree: layersTree}); \r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this)\r\n\t\t\t\t\t\t\t.on('layeradd', function (ev) {\r\n\t\t\t\t\t\t\t\tlet layer = ev.layer,\r\n\t\t\t\t\t\t\t\t\tprops = layer && layer.getGmxProperties && layer.getGmxProperties();\r\n\t\t\t\t\t\t\t\tif (props && props.name) {\r\n\t\t\t\t\t\t\t\t\tlayersTree.visible[props.name] = true;\r\n\t\t\t\t\t\t\t\t\tif (this._treeView) {\r\n\t\t\t\t\t\t\t\t\t\tthis._treeView.set({layersTree: layersTree}); \r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.iconSidebar) {\r\n\t\t\t\t\t\tlet triggerSidebar = (id) => {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (id === 'treeView') {\r\n\t\t\t\t\t\t\t\tshiftIconLayers = true;\r\n\t\t\t\t\t\t\t\tif (treePane) {\r\n\t\t\t\t\t\t\t\t\tthis._initTree({container: treePane, layersTree: layersTree, rawTree: gmxMap.rawTree, gmxTimeline: this.gmxTimeline});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tshiftIconLayers = false;\r\n\t\t\t\t\t\t\t\tif (treePane) {\r\n\t\t\t\t\t\t\t\t\ttreePane.innerHTML = '';\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.IconLayersContainer) {\r\n\t\t\t\t\t\t\t\tthis.IconLayersContainer.classList[shiftIconLayers ? 'add' : 'remove']('shiftIconLayers');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (repaintTimeline) {\r\n\t\t\t\t\t\t\t\trepaintTimeline();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.iconSidebar.on('change', e => triggerSidebar(e.detail.current));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet bLayersConf = state.baseLayersManager || { activeIDs: gmxMap.properties.BaseLayers };\r\n\t\t\t\t\tthis._initBaseLayers(map, bLayersConf, app);\r\n\t\t\t\t}.bind(this))\r\n\t\t\t\t.catch(console.log);\r\n\t\t\t\tthis.set({map: map, config: it});\r\n\t\t\t},\r\n\t\t\t_initBaseLayers(map, baseLayers, app) {\r\n\t\t\t\tconst lang = 'rus';\r\n\t\t\t\tlet blm = map.gmxBaseLayersManager,\r\n\t\t\t\t\tactiveIDs = baseLayers.activeIDs || ['sputnik'],\r\n\t\t\t\t\tcurrentID = baseLayers.currentID || activeIDs[0];\r\n\t\t\t\tblm.initDefaults().then(function() {\r\n\t\t\t\t\tblm.setActiveIDs(activeIDs);\r\n\t\t\t\t\tlet layers = blm.getActiveIDs().map(id => {\r\n\t\t\t\t\t\tvar layer = blm.get(id);\r\n\t\t\t\t\t\tif (!layer) {\r\n\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tlayer: layer,\r\n\t\t\t\t\t\t\t\ticon: layer.options.icon,\r\n\t\t\t\t\t\t\t\ttitle: layer.options[lang]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}).filter(e => e);\r\n\r\n\t\t\t\t\tif (app.iconLayers && app.iconLayers !== 'false') {\r\n\t\t\t\t\t\tlet baseLayersControl = new IconLayers(layers, {id: 'iconLayers'});\r\n\t\t\t\t\t\tmap.gmxControlsManager.add(baseLayersControl);\r\n\t\t\t\t\t\tmap.addControl(baseLayersControl);\r\n\t\t\t\t\t\tbaseLayersControl.setActiveLayer(blm.get(currentID));\r\n\t\t\t\t\t\tthis.IconLayersContainer = baseLayersControl.getContainer();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tblm.setCurrentID(currentID);\r\n\t\t\t\t\tif (app.treeView === 'opened' && this.iconSidebar) { this.iconSidebar.setCurrent('treeView'); }\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\t\t\t_getNodeIndex(target) {\r\n\t\t\t\tlet arr = target.parentNode.children,\r\n\t\t\t\t\ti, len;\r\n\t\t\t\tfor(i = 0, len = arr.length; i < len; i++) {\r\n\t\t\t\t\tif (arr[i] === target) break;\r\n\t\t\t\t}\r\n\t\t\t\treturn i === len ? null : i;\r\n\t\t\t},\r\n\r\n\t\t\t_initTree(it) {\r\n\t\t\t\tlet rawTree = {\r\n\t\t\t\t\ttype: 'map',\r\n\t\t\t\t\tcontent: it.rawTree\r\n\t\t\t\t};\r\n\t\t\t\tthis._treeView = new TreeView({\r\n\t\t\t\t\tappendNode: (id) => {\t// TODO: только видимые элементы (слои и папки) баги серверного скрипта\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\tif (this.gmxMap.nodes) {\r\n\t\t\t\t\t\t\tlet {map} = this.get();\r\n\t\t\t\t\t\t\tlet mapID = this.mapID,\r\n\t\t\t\t\t\t\t\tlayersTree = this.layersTree,\r\n\t\t\t\t\t\t\t\tvisible = layersTree.visible || {},\r\n\t\t\t\t\t\t\t\t// mapItem = L.gmx._maps['maps.kosmosnimki.ru'][mapID],\r\n\t\t\t\t\t\t\t\tgmxMap = this.gmxMap,\r\n\t\t\t\t\t\t\t\tlayersByID = gmxMap.layersByID;\r\n\t\t\t\t\t\t\tL.gmx.gmxMapManager.getMapFolder({\r\n\t\t\t\t\t\t\t\ttreeConfig: layersTree,\r\n\t\t\t\t\t\t\t\tmapId: mapID,\r\n\t\t\t\t\t\t\t\tfolderId: id\r\n\t\t\t\t\t\t\t}).then(function(json) {\r\n\t\t\t\t\t\t\t\tL.gmx.gmxMapManager.iterateNode(json.content, function(node) {\r\n\t\t\t\t\t\t\t\t\tlet props = node.content.properties,\r\n\t\t\t\t\t\t\t\t\t\tlayerId = props.name;\r\n\t\t\t\t\t\t\t\t\tif (layerId && layerId in visible && visible[layerId] !== props.visible) {\r\n\t\t\t\t\t\t\t\t\t\tprops.visible = visible[layerId];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}, {nodes: gmxMap.nodes});\r\n\t\t\t\t\t\t\t\tgmxMap.addLayersToMap(map);\r\n\t\t\t\t\t\t\t\tthis.treePane.innerHTML = '';\r\n\t\t\t\t\t\t\t\tthis._initTree({\r\n\t\t\t\t\t\t\t\t\tcontainer: this.treePane,\r\n\t\t\t\t\t\t\t\t\tlayersTree: this.layersTree,\r\n\t\t\t\t\t\t\t\t\trawTree: gmxMap.rawTree\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t}.bind(this));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttarget: it.container,\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tcontainer: it.container,\r\n\t\t\t\t\t\tlayersTree: it.layersTree,\r\n\t\t\t\t\t\tgmxTimeline: it.gmxTimeline ? true : false,\r\n\t\t\t\t\t\trawTree: rawTree\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._treeView.on('command', (ev) => {\r\n\t\t\t\t\tlet {map} = this.get();\r\n\t\t\t\t\tlet cmd = ev.cmd,\r\n\t\t\t\t\t\ttarget = ev.originalEvent ? ev.originalEvent.target : null,\r\n\t\t\t\t\t\tlayersTree = this.layersTree,\r\n\t\t\t\t\t\tgmxMap = this.gmxMap,\r\n\t\t\t\t\t\tnode = gmxMap.nodes ? gmxMap.nodes[ev.id] : true,\r\n\t\t\t\t\t\tgmxLayer = gmxMap.layersByID[ev.id];\r\n\r\n\t\t\t\t\t// console.log('Map command', ev, this.layersTree);\r\n\t\t\t\t\tif (gmxLayer && !(gmxLayer instanceof L.gmx.DummyLayer)) {\r\n\t\t\t\t\t\tif (cmd === 'fitBounds') {\r\n\t\t\t\t\t\t\tif (gmxLayer.getBounds) {\r\n\t\t\t\t\t\t\t\tlet bounds = gmxLayer.getBounds();\r\n\t\t\t\t\t\t\t\t\t// zoom = map.getBoundsZoom(bounds),\r\n\t\t\t\t\t\t\t\t\t// opt = gmxLayer.options;\r\n\t\t\t\t\t\t\t\t// zoom = zoom < opt.minZoom ? opt.minZoom : (zoom > opt.maxZoom ? opt.maxZoom : zoom);\r\n\t\t\t\t\t\t\t\t// map.setView(bounds.getCenter(), zoom);\r\n\r\n\t\t\t\t\t\t\t\tmap.fitBounds(bounds, {\t// maxZoom от М.Потанина\r\n\t\t\t\t\t\t\t\t\tanimation: false,\r\n\t\t\t\t\t\t\t\t\tmaxZoom: Math.min(Math.max(15, map.getZoom()), map.getBoundsZoom(bounds))\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (cmd === 'showInfo') {\r\n\t\t\t\t\t\t\tlet props = gmxLayer.getGmxProperties(),\r\n\t\t\t\t\t\t\t\tmeta = props.MetaProperties,\r\n\t\t\t\t\t\t\t\tgetContent = () => {\r\n\t\t\t\t\t\t\t\t\tif (meta.desc_long) {\r\n\t\t\t\t\t\t\t\t\t\treturn meta.desc_long.Value;\r\n\t\t\t\t\t\t\t\t\t} else if (Object.keys(meta).length) {\r\n\t\t\t\t\t\t\t\t\t\tlet arr = [];\r\n\t\t\t\t\t\t\t\t\t\tfor(let key in meta) {\r\n\t\t\t\t\t\t\t\t\t\t\tarr.push('<tr><td class=\"key\"><span>' + key + '</span></td><td><div>' + meta[key].Value + '</div></td></tr>');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\treturn '<table class=\"vectorInfoParams\"><tbody>' + arr.join('') + '</tbody></table>';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tdesc = getContent();\r\n\r\n\t\t\t\t\t\t\tif (desc) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tmap.gmxControlsManager.add(L.control.gmxPopup({content: desc}).openOn(map));\r\n/*\r\n\t\t\t\t\t\t\t\tlet popup = L.popup(),\r\n\t\t\t\t\t\t\t\t\tlatlng = map.getCenter(),\r\n\t\t\t\t\t\t\t\t\tonAdd = () => {\r\n\t\t\t\t\t\t\t\t\t\tlet ww = 300,\r\n\t\t\t\t\t\t\t\t\t\t\tmaxChild = null,\r\n\t\t\t\t\t\t\t\t\t\t\th = L.point(0,0),\r\n\t\t\t\t\t\t\t\t\t\t\toffset = [0, 0],\r\n\t\t\t\t\t\t\t\t\t\t\tcontainer = popup._contentNode,\r\n\t\t\t\t\t\t\t\t\t\t\tarr = container.childNodes;\r\n\t\t\t\t\t\t\t\t\t\tfor(let i = 0, len = arr.length; i < len; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet it = arr[i],\r\n\t\t\t\t\t\t\t\t\t\t\t\tw = it.clientWidth;\r\n\t\t\t\t\t\t\t\t\t\t\tif (w > ww) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tmaxChild = it;\r\n\t\t\t\t\t\t\t\t\t\t\t\tww = w;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (maxChild) {\r\n\t\t\t\t\t\t\t\t\t\t\tpopup.options.maxHeight = map.getContainer().clientHeight - 100;\r\n\t\t\t\t\t\t\t\t\t\t\tpopup.options.maxWidth = maxChild.clientWidth;\r\n\t\t\t\t\t\t\t\t\t\t\tpopup.options.offset = L.point(maxChild.clientWidth / 2, container.clientHeight / 2);\r\n\t\t\t\t\t\t\t\t\t\t\tpopup\r\n\t\t\t\t\t\t\t\t\t\t\t\t.remove()\r\n\t\t\t\t\t\t\t\t\t\t\t\t.off('add', onAdd, this)\r\n\t\t\t\t\t\t\t\t\t\t\t\t.openOn(map);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpopup\r\n\t\t\t\t\t\t\t\t\t.on('add', onAdd, this)\r\n\t\t\t\t\t\t\t\t\t.setLatLng(latlng)\r\n\t\t\t\t\t\t\t\t\t.setContent(desc)\r\n\t\t\t\t\t\t\t\t\t.openOn(map);\r\n\t\t\t\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (cmd === 'toggleNode') {\r\n\t\t\t\t\t\t\tlet flag = ev.set;\r\n\t\t\t\t\t\t\tif (flag) {\r\n\t\t\t\t\t\t\t\tif (!gmxLayer._map) {\r\n\t\t\t\t\t\t\t\t\tmap.addLayer(gmxLayer);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (gmxLayer._map) {\r\n\t\t\t\t\t\t\t\t\tmap.removeLayer(gmxLayer);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (cmd === 'toggleVisibility') {\r\n\t\t\t\t\t\t\tif (gmxLayer._map) {\r\n\t\t\t\t\t\t\t\tmap.removeLayer(gmxLayer);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmap.addLayer(gmxLayer);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (cmd === 'toggleTimeline' && this.gmxTimeline) {\r\n\t\t\t\t\t\t\tif (target.classList.contains('enabled')) {\r\n\t\t\t\t\t\t\t\tif (!this.gmxTimeline._map) {\r\n\t\t\t\t\t\t\t\t\tmap.addControl(this.gmxTimeline);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.gmxTimeline.addLayer(gmxLayer);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.gmxTimeline.removeLayer(gmxLayer);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (cmd === 'toggleStyle') {\r\n\t\t\t\t\t\t\tlet num = this._getNodeIndex(target.parentNode),\r\n\t\t\t\t\t\t\t\tstyles = gmxLayer.getStyles();\r\n\t\t\t\t\t\t\tif (target.classList.contains('enabled')) {\r\n\t\t\t\t\t\t\t\ttarget.classList.remove('enabled');\r\n\t\t\t\t\t\t\t\tstyles[num].disabled = true;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\ttarget.classList.add('enabled');\r\n\t\t\t\t\t\t\t\tdelete styles[num].disabled;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tgmxLayer.setStyles(styles);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (cmd === 'toggleVisibility' && !node) {\r\n\t\t\t\t\t\t\tthis._treeView.appendNode(ev.id);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tonstate({ changed, current, previous }) {\r\n\t\t\tif (changed.permalink && current.permalink) {\r\n\t\t\t\tthis.createMap(current.permalink);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n",
    "<div class=\"share\">\r\n\t<div class=\"arrow\"></div>\r\n\t{#if title}<h3 class=\"popover-title\">{title}</h3>{/if}\r\n\t<div class=\"popover-content\">\r\n\t\t<div class=\"shareDialogContainer\">\r\n\t\t\t<div class=\"shareDialog\">\r\n\t\t\t\t<div class=\"shareDialog-row shareDialog-title\">\r\n\t\t\t\t\t<span class=\"bold\">Ссылка на карту:</span>\r\n\t\t\t\t\t<a class=\"gmx-link_icon\" target=\"_blank\" href=\"//www.twitter.com/share?url={link}\"><i class=\"icon-twitter\"></i></a>\r\n\t\t\t\t\t<a class=\"gmx-link_icon\" target=\"_blank\" href=\"https://www.facebook.com/sharer/sharer.php?u={link}\"><i class=\"icon-facebook\"></i></a>\r\n\t\t\t\t\t<a class=\"gmx-link_icon\" target=\"_blank\" href=\"//vkontakte.ru/share.php?url{link}\"><i class=\"icon-vk\"></i></a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"shareDialog-row\">\r\n\t\t\t\t\t<div class=\"gmx-table\">\r\n\t\t\t\t\t\t<input class=\"shareDialog-inputPermalinkUrl\" type=\"text\" readonly=\"readonly\" value=\"{link}\">\r\n\t\t\t\t\t\t<a class=\"gmx-link_icon\" target=\"_blank\" href=\"{link}\"><i class=\"icon-link-ext\" title=\"открыть в новом окне\"></i></a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"shareDialog-row bold\">Код для вставки:</div>\r\n\t\t\t\t<div class=\"shareDialog-row\">\r\n\t\t\t\t\t<div class=\"gmx-table shareDialog-resolutionTable\">\r\n\t\t\t\t\t\t\t<input class=\"\" type=\"number\" value=\"{frameWidth}\" on:change=\"set({frameWidth: this.value})\">\r\n\t\t\t\t\t\t\t<span class=\"shareDialog-resolutionCross\">x</span>\r\n\t\t\t\t\t\t\t<input class=\"\" type=\"number\" value=\"{frameHeight}\" on:change=\"set({frameHeight: this.value})\">\r\n\t\t\t\t\t\t<span class=\"shareDialog-validationError hidden\">\r\n\t\t\t\t\t\t\t<span>предпросмотр</span><i class=\"icon-link-ext\"></i>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span class=\"shareDialog-previewLinkCell constrLink shareDialog-validationOk\">\r\n\t\t\t\t\t\t\t<a class=\"shareDialog-previewLink gmx-link\" href=\"{link}&edit=1\" target=\"_blank\">конструктор приложений</a><i class=\"gmx-icon icon-link-ext\"></i>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"shareDialog-row\">\r\n\t\t\t\t\t<textarea class=\"shareDialog-validationOk\" readonly=\"readonly\">&lt;iframe src=\"{link}\" width=\"{frameWidth}\" height=\"{frameHeight}\"&gt;&lt;/iframe&gt;</textarea>\r\n\t\t\t\t\t<div class=\"shareDialog-validationErrorView hidden\"><div class=\"alertWidget ui-widget\"></div></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"shareDialog-row\">\r\n\t\t\t\t\t<span class=\"shareDialog-previewLinkCell shareDialog-validationOk\">\r\n\t\t\t\t\t\t<a class=\"shareDialog-previewLink gmx-link\" href=\"//winnie.kosmosnimki.ru/2.0/iframePreview.html?width={frameWidth}&amp;height={frameHeight}&amp;url={link}\" target=\"_blank\">предпросмотр</a><i class=\"gmx-icon icon-link-ext\"></i>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n \r\n<script>\r\n\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tframeWidth: 800,\r\n\t\t\t\tframeHeight: 600,\r\n\t\t\t\tconf: 'R6UIY',\r\n\t\t\t\ttitle: ''\r\n\t\t\t}\r\n\t\t},\r\n\t\tcomputed: {\r\n\t\t\tlink: ({ conf }) => '//winnie.kosmosnimki.ru/2.0/?config=' + conf,\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n.share {\r\n    background-color: white;\r\n\tmargin-top: 6px;\r\n\tposition: absolute;\r\n\tz-index: 80;\r\n    left: 30px;\r\n    top: 40px;\r\n}\r\n.share {\r\n    padding: 1px;\r\n\tpadding-top: 0px;\r\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n    font-weight: normal;\r\n    text-align: left;\r\n    border: 1px solid rgba(0, 0, 0, 0.2);\r\n    border-radius: 4px;\r\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\r\n    white-space: normal;\r\n    font-size: 11px;\r\n}\r\n.shareDialog-row {\r\n    padding-bottom: 8px;\r\n}\r\n.bold {\r\n    font-weight: bold;\r\n}\r\n.shareDialog-resolutionTable input {\r\n    width: 40px;\r\n\ttext-align: center;\r\n}\r\ntextarea.shareDialog-validationOk {\r\n    width: 96%;\r\n\theight: 66px;\r\n}\r\n\r\n.hidden {\r\n\tdisplay: none;\r\n}\r\n.shareDialog-previewLinkCell {\r\n    width: 50%;\r\n    text-align: right;\r\n\tfloat: right;\r\n}\r\n.constrLink {\r\n\tfloat: unset;\r\n    padding-left: 14px;\r\n}\r\n.shareDialog-previewLinkCell a {\r\n    color: #121212;\r\n}\r\n.shareDialog-inputPermalinkUrl {\r\n    width: 260px;\r\n}\r\n.shareDialog .shareDialog-inputEmbedCode {\r\n    height: 55px;\r\n    resize: none;\r\n    display: block;\r\n    font-family: monospace;\r\n}\r\n.share > .arrow:after {\r\n    border-width: 8px;\r\n    content: \"\";\r\n}\r\n.share > .arrow:after {\r\n    content: \" \";\r\n    top: 1px;\r\n    margin-left: -5px;\r\n    border-top-width: 0px;\r\n    border-bottom-color: #fff;\r\n}\r\n.share > .arrow, .share > .arrow:after {\r\n\tleft: 32%;\r\n    top: -5px;\r\n    position: relative;\r\n    display: block;\r\n    width: 0px;\r\n    height: 0px;\r\n    border-style: solid;\r\n}\r\n.gmx-link_icon {\r\n    float: right;\r\n\tcolor: grey;\r\n    font-size: 12px;\r\n\tmargin-top: 4px;\r\n}\r\n.shareDialog i {\r\n    font-size: 12px;\r\n}\r\n.icon-twitter:before {\r\n    content: '\\';\r\n}\r\n.icon-facebook:before {\r\n    content: '\\';\r\n}\r\n.icon-vk:before {\r\n    content: '\\';\r\n}\r\n.icon-link-ext:before {\r\n    content: '\\';\r\n}\r\n.popover-content {\r\n    padding: 6px 8px;\r\n}\r\n</style>\r\n",
    "<div class=\"TreeView\" on:click=\"chkEvent(event)\">\r\n\t<LineNode line={rawTree} parentProps={rawTree.content.properties} bind:layersTree bind:gmxTimeline />\r\n</div>\r\n \r\n\r\n<style>\r\n.TreeView {\r\n    position: absolute;\r\n\twidth: 358px;\r\n    overflow-y: scroll;\r\n\tbackground-color: white;\r\n}\r\n</style>\r\n\r\n<script>\r\n\timport LineNode from './LineNode.html';\r\n\tlet regs = {\r\n\t\tcmd: /cmd:(\\w+)/,\r\n\t\tid: /id:(\\w+)/\r\n\t}\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tconfig: {},\r\n\t\t\t\tlayersTree: {\r\n\t\t\t\t\tvisible: {},\r\n\t\t\t\t\texpanded: {}\r\n\t\t\t\t},\r\n\t\t\t\t//gmxTimeline: false,\r\n\t\t\t\tgroup: null,\r\n\t\t\t\trawTree: null\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmethods: {\r\n\t\t\tchkEvent(ev) {\r\n\t\t\t\tlet target = ev.target,\r\n\t\t\t\t\tclassName = target.className,\r\n\t\t\t\t\tarr = regs.cmd.exec(className);\r\n\r\n\t\t\t\tif (arr && arr.length === 2) {\r\n\t\t\t\t\tlet out = {\r\n\t\t\t\t\t\tcmd: arr[1],\r\n\t\t\t\t\t\ttype: ev.type,\r\n\t\t\t\t\t\toriginalEvent: ev\r\n\t\t\t\t\t};\r\n\t\t\t\t\tfor(let i = 0; i < 10; i++) {\r\n\t\t\t\t\t\tif (target.classList.contains('line')) {\r\n\t\t\t\t\t\t\tout.nodeType = target.classList.contains('layer') ? 'layer' : 'group';\r\n\t\t\t\t\t\t\tout.id = this._getId(target.className);\r\n\t\t\t\t\t\t\tout.target = target;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttarget = target.parentNode;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (out.id) {\r\n\t\t\t\t\t\tthis.treeCommands(out);\r\n\t\t\t\t\t\tthis.fire('command', out);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t_getId(className) {\r\n\t\t\t\tlet arr = regs.id.exec(className);\r\n\t\t\t\treturn arr && arr.length === 2 ? arr[1] : '';\r\n\t\t\t},\r\n\t\t\t_isExistVisible(node, layersTree) {\r\n\t\t\t\tlet cnt = 0,\r\n\t\t\t\t\tlen = node.children.length; \r\n\t\t\t\tfor(let i = 0; i < len; i++) {\r\n\t\t\t\t\tlet it = node.children[i],\r\n\t\t\t\t\t\tid = this._getId(it.className);\r\n\t\t\t\t\tif (layersTree.visible[id]) {\r\n\t\t\t\t\t\tcnt++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn cnt === 0 ? 0 :\t\t// notVisibleLayers\r\n\t\t\t\t\t(cnt === len ? 1 :\t\t// allVisibleLayers\r\n\t\t\t\t\t0.5);\t\t\t\t\t// existsVisibleLayers\r\n\t\t\t},\r\n\r\n\t\t\t_toggleParents(node, visible, layersTree) {\r\n\t\t\t\tlet flag = true;\r\n\t\t\t\twhile(flag) {\r\n\t\t\t\t\tnode = node.parentNode\r\n\t\t\t\t\tif (node.classList.contains('line')) {\r\n\t\t\t\t\t\tlet id = this._getId(node.className);\r\n\t\t\t\t\t\tif (id) {\r\n\t\t\t\t\t\t\tlayersTree.visible[id] = visible;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (node.classList.contains('group')) {\r\n\t\t\t\t\t\tif (!visible && this._isExistVisible(node, layersTree)) {\r\n\t\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t_uncheckRadio(node, id, layersTree) {\r\n\t\t\t\tfor(let i = 0, len = node.children.length; i < len; i++) {\r\n\t\t\t\t\tlet it = node.children[i],\r\n\t\t\t\t\t\tpid = this._getId(it.className);\r\n\t\t\t\t\tif (pid !== id) {\r\n\t\t\t\t\t\tthis.fire('command', { id: pid, set: false, cmd: 'toggleNode' });\r\n\t\t\t\t\t\t// layersTree.expanded[pid] = ph.set;\r\n\t\t\t\t\t\tlayersTree.visible[pid] = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t_iterateNodeChilds(node, visible, layersTree) {\r\n\t\t\t\tlet id = this._getId(node.className),\r\n\t\t\t\t\tisGroup = node.classList.contains('group'),\r\n\t\t\t\t\tul = node.getElementsByTagName('ul')[0];\r\n\r\n\t\t\t\tlayersTree.visible[id] = visible;\r\n\t\t\t\tif (isGroup) {\r\n\t\t\t\t\tlayersTree.expanded[id] = visible;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.fire('command', { id: id, set: visible, cmd: 'toggleNode' });\r\n\t\t\t\t}\r\n\t\t\t\tif (ul) {\r\n\t\t\t\t\tlet isRadio = ul.classList.contains('radio'),\r\n\t\t\t\t\t\tflag = visible;\r\n\t\t\t\t\tfor(let i = 0, len = ul.children.length; i < len; i++) {\r\n\t\t\t\t\t\tlet it = ul.children[i],\r\n\t\t\t\t\t\t\tpid = this._getId(it.className);\r\n\t\t\t\t\t\tif (isRadio && i) { flag = false; }\r\n\t\t\t\t\t\tthis._iterateNodeChilds(it, flag, layersTree);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\ttreeCommands(attr) {\r\n\t\t\t\tlet {layersTree, rawTree} = this.get(),\r\n\t\t\t\t\tid = attr.id,\r\n\t\t\t\t\tisGroup = attr.nodeType === 'group',\r\n\t\t\t\t\t// expanded = attr.nodeType ? layersTree.expanded : layersTree.visible,\r\n\t\t\t\t\tisExpanded = !layersTree.expanded[id],\r\n\t\t\t\t\tisVisible = !layersTree.visible[id],\r\n\t\t\t\t\toptions = layersTree.options[id] || {},\r\n\t\t\t\t\tph = {\r\n\t\t\t\t\t\tcmd: 'toggleNode',\r\n\t\t\t\t\t\ttype: attr.type,\r\n\t\t\t\t\t\tnodeType: attr.nodeType,\r\n\t\t\t\t\t\toriginalEvent: attr.originalEvent\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t// console.log('treeCommands', attr.cmd, attr.nodeType);\r\n\r\n\t\t\t\tif (attr.cmd === 'clickOnExpander') {\r\n\t\t\t\t\tlayersTree.expanded[id] = !layersTree.expanded[id];\r\n\t\t\t\t\tthis.set({layersTree: layersTree});\r\n\t\t\t\t} else if (attr.cmd === 'toggleGroup') {\r\n\t\t\t\t\tthis._iterateNodeChilds(attr.target, isVisible, layersTree);\r\n\t\t\t\t\tthis._toggleParents(attr.target, isExpanded, layersTree);\r\n\r\n\t\t\t\t\tthis.set({layersTree: layersTree});\r\n\t\t\t\t} else if (attr.cmd === 'toggleVisibility') {\r\n\t\t\t\t\tlet node = attr.target,\r\n\t\t\t\t\t\tisGroup = node.getElementsByClassName('expanderInput')[0],\r\n\t\t\t\t\t\texpanded = isGroup ? layersTree.expanded : layersTree.visible,\r\n\t\t\t\t\t\tul = node.parentNode;\r\n\r\n\t\t\t\t\tif (expanded[id]) {\r\n\t\t\t\t\t\tdelete expanded[id];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\texpanded[id] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (ul && ul.classList.contains('radio')) {\r\n\t\t\t\t\t\tthis._uncheckRadio(ul, id, layersTree);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._toggleParents(attr.target, expanded[id], layersTree);\r\n\t\t\t\t\tthis.set({layersTree: layersTree});\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\tappendNode(id) {\r\n\t\t\t\tthis.options.appendNode(id);\r\n\t\t\t}\r\n\t\t},\r\n\t\tcomponents: {\r\n\t\t\tLineNode\r\n\t\t}\r\n\t}\r\n\r\n</script>\r\n",
    "<li class=\"line cmd:toggleIcons id:{nodeID} {line.type}\" ref:line>\r\n<div class=\"mega\">\r\n{#if properties}\r\n {#if line.type !== 'map'}\r\n\t{#if line.type === 'group'}\r\n\t<input class=\"expander expanderInput hidden\" type=\"checkbox\" checked=\"{isOpened}\" ref:expander />\r\n\t<span class=\"expander pointer expanderCont cmd:clickOnExpander\" on:click=\"clickOnExpander(this)\"></span>\r\n\t{/if}\r\n\t\t{#if line.type === 'layer'} <!-- begin: line.type === 'layer' -->\r\n\t\t\t{#if properties.styles.length > 1}\r\n\t<span class=\"cont-overlays\"><svg role=\"img\" class=\"svgIcon\"><use xlink:href=\"#overlays\" href=\"#overlays\"></use></svg></span>\r\n\t\t\t{/if}\r\n\t<span class=\"icons \">\r\n\r\n\t\t{#if gmxTimeline && properties.Temporal && (properties.IsRasterCatalog || (properties.Quicklook && properties.Quicklook !== 'null'))}\r\n\t\t<span class=\"pointer cmd:toggleTimeline cont-timeline disabled\" title=\"Add timeline\" on:click=\"toggleTimeline(this)\"></span>\r\n\t\t{/if}\r\n\t\t\r\n\t\t{#if isInfo}\r\n\t\t<span class=\"pointer cmd:showInfo cont-info\" title=\"View description\"></span>\r\n\t\t{/if}\r\n \t\t<span class=\"pointer cmd:fitBounds cont-center\"  title=\"Move map to this layer\"></span>\r\n\t\t\t\r\n\t\t\r\n\t</span>\r\n\t\t{/if} <!-- end: line.type === 'layer' -->\r\n {/if}\r\n {#if line.type !== 'map'}\r\n\t<span class=\"cont\">\r\n\t\t{#if line.type === 'group'}\r\n\t\t\t{#if properties.ShowCheckbox}\r\n\t\t\t\t<input class=\"check visibility pointer cmd:toggleGroup {line.type} id:{nodeID}\" name=\"{checkboxName}\" type=\"{checkboxType}\" checked=\"{isGroupVisible}\" />\r\n\t\t\t{/if}\r\n\t\t{:else}\r\n\t\t\t<input class=\"check visibility pointer cmd:toggleVisibility {line.type} id:{nodeID}\" name=\"{checkboxName}\" type=\"{checkboxType}\" checked=\"{isVisible}\" />\r\n\t\t{/if}\r\n\t\t{#if line.type === 'layer' && styles.length && styles.length < 2 && styles[0].RenderStyle}\r\n\t\t\t<LegendIconCell item={styles[0]} type={properties.GeometryType} />\r\n\t\t{/if}\r\n\t\t<label class=\"pointer title \r\n\t\t\t{!isGroup ? ' cmd:toggleVisibility' : (isShowCheckbox ? ' cmd:toggleGroup' : '')}\r\n\t\t\t{multiStyles}\r\n\t\t\t\"\r\n\t\t\ton:click=\"clickOnExpander(this)\"\r\n\t\t\t>{properties.title}</label>\r\n\t\t<div class=\"description {properties.description ? '' : 'collapse'}\">{@html properties.description || ''}</div>\r\n\t\t{#if line.type === 'layer'}\r\n\t\t\t{#if styles.length && styles.length > 1 && styles[0].RenderStyle}\r\n\t\t\t<div class=\"legend\">\r\n\t\t\t\t<div class=\"legend-cont\">\r\n\t\t\t\t{#each styles as it}\r\n\t\t\t\t\t<div class=\"gmx-style-legend\">\r\n\t\t\t\t\t\t<span class=\"legendIconEye enabled pointer cmd:toggleStyle\"></span>\r\n\t\t\t\t\t\t<LegendIconCell item={it} type={properties.GeometryType} />\r\n\t\t\t\t\t\t<span class=\"styleName\">{it.Name}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t{/each}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{/if}\r\n\t\t{/if}\r\n\t</span>\r\n  {/if}\r\n{/if}\r\n</div>\r\n\r\n{#if line.content.children}\r\n\t<ul class=\"group css-treeview id_{nodeID} {isOpened || isRoot ? '' : 'collapse'} {isRadio}\" ref:ul>\r\n\t{#each line.content.children || [] as child}\r\n\t\t<svelte:self line={child} parentProps={line.content.properties} bind:layersTree bind:gmxTimeline />\r\n\t{/each}\r\n\t</ul>\r\n{/if}\r\n</li> \r\n\r\n<script>\r\n\r\n\timport LegendIconCell from './LegendIconCell.html';\r\n\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\t//gmxTimeline: false,\r\n\t\t\t\tline: null\r\n\t\t\t}\r\n\t\t},\r\n\t\t// helpers: {\r\n\t\t// },\r\n\t\tcomputed: {\r\n\t\t\tcheckboxType: ({ parentProps }) => parentProps && parentProps.list ? 'radio' : 'checkbox',\r\n\t\t\tcheckboxName: ({ parentProps }) => parentProps && parentProps.GroupID || '',\r\n\t\t\tproperties: ({ line }) => line.content.properties,\r\n\t\t\tisGroup: ({ line }) => line.type === 'group',\r\n\t\t\tisShowCheckbox: ({ properties }) => properties.ShowCheckbox,\r\n\t\t\tisInfo: ({ properties }) => properties.MetaProperties && Object.keys(properties.MetaProperties).length,\r\n\t\t\tisRadio: ({ properties }) => properties.list ? 'radio' : 'checkbox',\r\n\t\t\tnodeID: ({ properties }) => properties ? properties.name || properties.GroupID : 'root',\r\n\t\t\tstyles: ({ properties }) => properties.gmxStyles ? properties.gmxStyles.styles : [],\r\n\t\t\tmultiStyles: ({ properties }) => properties.gmxStyles && properties.gmxStyles.styles.length > 1 ? 'multiStyles' : '',\r\n\t\t\tisRoot: ({ properties }) => properties.MapID,\r\n\t\t\tisOpened: ({line, layersTree}) => {\r\n\t\t\t\tlet content = line.content,\r\n\t\t\t\t\tprops = content.properties,\r\n\t\t\t\t\tnodeID = props.GroupID || 'root';\r\n\t\t\t\treturn layersTree.expanded[nodeID];\r\n\t\t\t},\r\n\t\t\tisGroupVisible: ({line, layersTree}) => {\r\n\t\t\t\tlet content = line.content,\r\n\t\t\t\t\tprops = content.properties,\r\n\t\t\t\t\tnodeID = props.GroupID || 'root';\r\n\t\t\t\treturn layersTree.visible[nodeID];\r\n\t\t\t},\r\n\t\t\tisVisible: ({line, layersTree}) => {\r\n\t\t\t\treturn layersTree.visible[line.content.properties.name];\r\n\t\t\t}\r\n\t\t},\r\n\t\tcomponents: {\r\n\t\t\tLegendIconCell\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tclickOnExpander(target) {\r\n\t\t\t\tlet {line} = this.get();\r\n\t\t\t\t\r\n\t\t\t\tif (line.type === 'group' && !line.content.properties.ShowCheckbox) {\r\n\t\t\t\t\tlet node = this.refs.ul;\r\n\t\t\t\t\tif (node) {\r\n\t\t\t\t\t\tlet isCollapse = node.classList.contains('collapse'),\r\n\t\t\t\t\t\t\texpander = this.refs.expander;\r\n\t\t\t\t\t\tif (isCollapse) {\r\n\t\t\t\t\t\t\tnode.classList.remove('collapse');\r\n\t\t\t\t\t\t\texpander.checked = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnode.classList.add('collapse');\r\n\t\t\t\t\t\t\texpander.checked = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\ttoggleTimeline(node) {\r\n\t\t\t\tif (node) {\r\n\t\t\t\t\tif (node.classList.contains('disabled')) {\r\n\t\t\t\t\t\tnode.classList.remove('disabled');\r\n\t\t\t\t\t\tnode.classList.add('enabled');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnode.classList.add('disabled');\r\n\t\t\t\t\t\tnode.classList.remove('enabled');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tshowInfo(target) {\r\n\t\t\t\tlet node = target.parentNode.nextElementSibling.getElementsByClassName('description')[0];\r\n\t\t\t\tif (node) {\r\n\t\t\t\t\tif (node.classList.contains('collapse')) {\r\n\t\t\t\t\t\tlet {line} = this.get();\r\n\t\t\t\t\t\tnode.innerHTML = line.content.properties.description || '';\r\n\t\t\t\t\t\tnode.classList.remove('collapse');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnode.classList.add('collapse');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n\r\n<style>\r\n\r\nul {\r\n\tpadding-inline-start: 12px;\r\n}\r\nli {\r\n\tlist-style: none;\r\n    text-overflow: ellipsis;\r\n    white-space: initial;\r\n    overflow-x: inherit;\r\n\twidth: 100%;\r\n}\r\nli.line > .icons span.cont-center {\r\n\tvisibility: visible;\r\n}\r\nli.line:hover > .icons span.cont-center {\r\n\tvisibility: visible;\r\n}\r\nli.line:hover > .cont label.title {\r\n\tfont-weight: normal;\r\n}\r\n\r\nsvg {\r\n\tpointer-events: none;\r\n}\r\n\r\nsvg {\r\n    height: 14px;\r\n    width: 14px;\r\n}\r\n.timeline {\r\n    position: absolute;\r\n    top: -3px;\r\n    left: 2px;\r\n}\r\n.timeline.disabled {\r\n\tfill: #999999;\r\n}\r\n.timeline.enabled {\r\n\tfill: #45B0D8;\r\n}\r\n\r\n.pointer {\r\n    cursor: pointer;\r\n}\r\n.expanderInput {\r\n\tdisplay: initial;\r\n\tposition: relative;\r\n\tright: 17px;\r\n\ttop: 0;\r\n}\r\n.expanderCont {\r\n    position: relative;\r\n\ttop: -5px;\r\n}\r\n.legend {\r\n\tpadding-left: 20px;\r\n    display: none;\r\n}\r\n.legend-cont {\r\n\tfloat: left;\r\n\tbackground: #FFF;\r\n    top: 3px;\r\n\r\n}\r\n\r\ninput.check.visibility:checked ~ .legend {\r\n    display: block;\r\n\tclear: both;\r\n}\r\n.gmx-style-legend .legendIconCell.style {\r\n    top: 0px;\r\n    position: relative;\r\n}\r\n.gmx-style-legend .legendIconCell {\r\n    width: 100%;\r\n}\r\n.legendIconEye {\r\n\tdisplay: inline-block;\r\n}\r\n.legendIconEye > .off {\r\n    position: relative;\r\n}\r\n.legendIconEye.enabled > .on, .legendIconEye > .off {\r\n    display: inline-block;\r\n}\r\n.legendIconEye > .on, .legendIconEye.enabled > .off {\r\n    display: none;\r\n}\r\n\r\n:global(.collapse) {\r\n    display: none;\r\n}\r\n\r\nspan.cont-overlays {\r\n    position: relative;\r\n    left: 26px;\r\n    padding-top: 2px;\r\n}\r\nspan.icons {\r\n\tz-index: 1;\r\n    right: 8px;\r\n    position: relative;\r\n    /*position: absolute;*/\r\n}\r\n.hidden {\r\n    visibility: hidden;\r\n}\r\n\r\n.styleName {\r\n    position: relative;\r\n    bottom: 4px;\r\n    z-index: 2;\r\n    font-size: 12px;\r\n\r\n}\r\n\r\n\r\n</style>\r\n",
    "<span class=\"legendIconCell style\">\r\n{#if item.RenderStyle.iconUrl}\r\n\t<img src=\"{item.RenderStyle.iconUrl}\" crossorigin=\"\" alt=\"Style Icon\" />\r\n{:elseif fillPattern}\r\n\t<img src=\"{fillPattern}\" alt=\"Style Icon\" class=\"fillPattern\" />\r\n{:else}\r\n\t<span class=\"{type} legendIconStyle \" style=\"background-color: {backgroundColor}; border-color: {borderColor};\"></span>\r\n{/if}\r\n</span>\r\n \r\n<script>\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t}\r\n\t\t},\r\n\t\tcomputed: {\r\n\t\t\tfillPattern: ({ item }) => {\r\n\t\t\t\tlet st = L.extend({}, item.RenderStyle, {fillOpacity: 1}),\r\n\t\t\t\t\tfillPattern = L.gmxUtil.getPatternIcon(null, st);\r\n\t\t\t\treturn fillPattern ? fillPattern.canvas.toDataURL() : null;\r\n\t\t\t},\r\n\t\t\tbackgroundColor: ({ item }) => L.gmxUtil.dec2rgba(item.RenderStyle.fillColor, item.RenderStyle.fillOpacity || 1),\r\n\t\t\tborderColor: ({ item }) => L.gmxUtil.dec2rgba(item.RenderStyle.color, item.RenderStyle.opacity || 1)\r\n\t\t},\r\n\r\n\t\tonstate({ changed, current, previous }) {\r\n // console.log('LegendIconCell in onstate', changed, current, previous);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n\r\n<style>\r\n.legendIconCell {\r\n    /*\r\n\tleft: -8px;\r\n    position: relative;\r\n\t*/\r\n}\r\n.legendIconCell img {\r\n    height: 13px;\r\n}\r\n.legendIconCell .polygon {\r\n    display: inline-block;\r\n}\r\n\r\n.legendIconCell .linestring {\r\n    border-bottom: unset;\r\n    border-top: unset;\r\n    border-right: unset;\r\n\tborder-radius: unset;\r\n    border-width: 2px;\r\n}\r\n.legendIconCell .point {\r\n    display: inline-block;\r\n    width: 10px;\r\n    height: 10px;\r\n    /*top: -4px;*/\r\n}\r\n.legendIconCell span {\r\n    width: 10px;\r\n    height: 10px;\r\n    border: solid;\r\n    border-width: 1px;\r\n\t/*display: inline-block;*/\r\n    /*position: relative;*/\r\n    /*top: -2px;*/\r\n    margin-right: 2px;\r\n    margin-bottom:2px;\r\n}\r\n\r\n.check.visibility.pointer {\r\ndisplay: inline-flex;\r\n}\r\n\r\n\r\n\r\n\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "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"
}